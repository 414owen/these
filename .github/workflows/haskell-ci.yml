# This GitHub workflow config has been generated by a script via
#
#   haskell-ci 'github' 'cabal.project'
#
# To regenerate the script (for example after adjusting tested-with) run
#
#   haskell-ci regenerate
#
# For more information, see https://github.com/haskell-CI/haskell-ci
#
# version: 0.12
#
# REGENDATA ("0.12",["github","cabal.project"])
#
name: Haskell-CI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  linux:
    name: Haskell-CI - Linux - ${{ matrix.compiler }}
    runs-on: ubuntu-18.04
    container:
      image: buildpack-deps:bionic
    continue-on-error: ${{ matrix.allow-failure }}
    strategy:
      matrix:
        include:
          - compiler: ghcjs-8.4
            allow-failure: false
          - compiler: ghc-9.0.1
            allow-failure: false
          - compiler: ghc-8.10.4
            allow-failure: false
          - compiler: ghc-8.8.4
            allow-failure: false
          - compiler: ghc-8.6.5
            allow-failure: false
          - compiler: ghc-8.4.4
            allow-failure: false
          - compiler: ghc-8.2.2
            allow-failure: false
          - compiler: ghc-8.0.2
            allow-failure: false
          - compiler: ghc-7.10.3
            allow-failure: false
          - compiler: ghc-7.8.4
            allow-failure: false
          - compiler: ghc-7.6.3
            allow-failure: false
          - compiler: ghc-7.4.2
            allow-failure: false
      fail-fast: false
    steps:
      - name: Set GHCJS environment variables
        run: |
          if echo $CC | grep -q ghcjs; then
          echo "GHCJS=true" >> $GITHUB_ENV
          echo "GHCJSARITH=1" >> $GITHUB_ENV
          else
          echo "GHCJS=false" >> $GITHUB_ENV
          echo "GHCJSARITH=0" >> $GITHUB_ENV
          fi
        env:
          CC: ${{ matrix.compiler }}
      - name: apt
        run: |
          apt-get update
          apt-get install -y --no-install-recommends gnupg ca-certificates dirmngr curl git software-properties-common
          apt-add-repository -y 'ppa:hvr/ghc'
          if [ $((GHCJSARITH)) -ne 0 ] ; then apt-add-repository -y 'ppa:hvr/ghcjs' ; fi
          if [ $((GHCJSARITH)) -ne 0 ] ; then curl -sSL "https://deb.nodesource.com/gpgkey/nodesource.gpg.key" | apt-key add - ; fi
          if [ $((GHCJSARITH)) -ne 0 ] ; then apt-add-repository -y 'deb https://deb.nodesource.com/node_10.x bionic main' ; fi
          apt-get update
          if [ $((GHCJSARITH)) -ne 0 ] ; then apt-get install -y $CC cabal-install-3.4 ghc-8.4.4 nodejs ; else apt-get install -y $CC cabal-install-3.4 ; fi
        env:
          CC: ${{ matrix.compiler }}
      - name: Set PATH and environment variables
        run: |
          echo "$HOME/.cabal/bin" >> $GITHUB_PATH
          if [ $((GHCJSARITH)) -ne 0 ] ; then echo "/opt/ghc/8.4.4/bin" >> $GITHUB_PATH ; fi
          echo "LANG=C.UTF-8" >> $GITHUB_ENV
          echo "CABAL_DIR=$HOME/.cabal" >> $GITHUB_ENV
          echo "CABAL_CONFIG=$HOME/.cabal/config" >> $GITHUB_ENV
          HCDIR=$(echo "/opt/$CC" | sed 's/-/\//')
          if [ $((GHCJSARITH)) -ne 0 ] ; then HCNAME=ghcjs ; else HCNAME=ghc ; fi
          HC=$HCDIR/bin/$HCNAME
          echo "HC=$HC" >> $GITHUB_ENV
          echo "HCPKG=$HCDIR/bin/$HCNAME-pkg" >> $GITHUB_ENV
          echo "HADDOCK=$HCDIR/bin/haddock" >> $GITHUB_ENV
          echo "CABAL=/opt/cabal/3.4/bin/cabal -vnormal+nowrap" >> $GITHUB_ENV
          HCNUMVER=$(${HC} --numeric-version|perl -ne '/^(\d+)\.(\d+)\.(\d+)(\.(\d+))?$/; print(10000 * $1 + 100 * $2 + ($3 == 0 ? $5 != 1 : $3))')
          echo "HCNUMVER=$HCNUMVER" >> $GITHUB_ENV
          echo "ARG_TESTS=--enable-tests" >> $GITHUB_ENV
          echo "ARG_BENCH=--enable-benchmarks" >> $GITHUB_ENV
          echo "HEADHACKAGE=false" >> $GITHUB_ENV
          echo "ARG_COMPILER=--$HCNAME --with-compiler=$HC" >> $GITHUB_ENV
        env:
          CC: ${{ matrix.compiler }}
      - name: env
        run: |
          env
      - name: write cabal config
        run: |
          mkdir -p $CABAL_DIR
          cat >> $CABAL_CONFIG <<EOF
          remote-build-reporting: anonymous
          write-ghc-environment-files: never
          remote-repo-cache: $CABAL_DIR/packages
          logs-dir:          $CABAL_DIR/logs
          world-file:        $CABAL_DIR/world
          extra-prog-path:   $CABAL_DIR/bin
          symlink-bindir:    $CABAL_DIR/bin
          installdir:        $CABAL_DIR/bin
          build-summary:     $CABAL_DIR/logs/build.log
          store-dir:         $CABAL_DIR/store
          install-dirs user
            prefix: $CABAL_DIR
          repository hackage.haskell.org
            url: http://hackage.haskell.org/
          EOF
          cat $CABAL_CONFIG
      - name: versions
        run: |
          $HC --version || true
          $HC --print-project-git-commit-id || true
          $CABAL --version || true
          if [ $((GHCJSARITH)) -ne 0 ] ; then node --version ; fi
          if [ $((GHCJSARITH)) -ne 0 ] ; then echo $GHCJS ; fi
      - name: update cabal index
        run: |
          $CABAL v2-update -v
      - name: cache (tools)
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ matrix.compiler }}-tools-68b98ccd
          path: ~/.haskell-ci-tools
      - name: install cabal-plan
        run: |
          mkdir -p $HOME/.cabal/bin
          curl -sL https://github.com/haskell-hvr/cabal-plan/releases/download/v0.6.2.0/cabal-plan-0.6.2.0-x86_64-linux.xz > cabal-plan.xz
          echo 'de73600b1836d3f55e32d80385acc055fd97f60eaa0ab68a755302685f5d81bc  cabal-plan.xz' | sha256sum -c -
          xz -d < cabal-plan.xz > $HOME/.cabal/bin/cabal-plan
          rm -f cabal-plan.xz
          chmod a+x $HOME/.cabal/bin/cabal-plan
          cabal-plan --version
      - name: install cabal-docspec
        run: |
          mkdir -p $HOME/.cabal/bin
          curl -sL https://github.com/phadej/cabal-extras/releases/download/cabal-docspec-0.0.0.20210111/cabal-docspec-0.0.0.20210111.xz > cabal-docspec.xz
          echo '0829bd034fba901cbcfe491d98ed8b28fd54f9cb5c91fa8e1ac62dc4413c9562  cabal-docspec.xz' | sha256sum -c -
          xz -d < cabal-docspec.xz > $HOME/.cabal/bin/cabal-docspec
          rm -f cabal-docspec.xz
          chmod a+x $HOME/.cabal/bin/cabal-docspec
          cabal-docspec --version
      - name: install doctest
        run: |
          if [ $((! GHCJSARITH && HCNUMVER >= 80000 && HCNUMVER < 90000)) -ne 0 ] ; then $CABAL --store-dir=$HOME/.haskell-ci-tools/store v2-install $ARG_COMPILER --ignore-project -j2 doctest --constraint='doctest ^>=0.17' ; fi
          if [ $((! GHCJSARITH && HCNUMVER >= 80000 && HCNUMVER < 90000)) -ne 0 ] ; then doctest --version ; fi
      - name: checkout
        uses: actions/checkout@v2
        with:
          path: source
      - name: initial cabal.project for sdist
        run: |
          touch cabal.project
          echo "packages: $GITHUB_WORKSPACE/source/these" >> cabal.project
          echo "packages: $GITHUB_WORKSPACE/source/these-lens" >> cabal.project
          if [ $((GHCJSARITH || ! GHCJSARITH && HCNUMVER >= 80000)) -ne 0 ] ; then echo "packages: $GITHUB_WORKSPACE/source/these-optics" >> cabal.project ; fi
          echo "packages: $GITHUB_WORKSPACE/source/semialign" >> cabal.project
          echo "packages: $GITHUB_WORKSPACE/source/monad-chronicle" >> cabal.project
          echo "packages: $GITHUB_WORKSPACE/source/these-tests" >> cabal.project
          cat cabal.project
      - name: sdist
        run: |
          mkdir -p sdist
          $CABAL sdist all --output-dir $GITHUB_WORKSPACE/sdist
      - name: unpack
        run: |
          mkdir -p unpacked
          find sdist -maxdepth 1 -type f -name '*.tar.gz' -exec tar -C $GITHUB_WORKSPACE/unpacked -xzvf {} \;
      - name: generate cabal.project
        run: |
          PKGDIR_these="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/these-[0-9.]*')"
          echo "PKGDIR_these=${PKGDIR_these}" >> $GITHUB_ENV
          PKGDIR_these_lens="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/these-lens-[0-9.]*')"
          echo "PKGDIR_these_lens=${PKGDIR_these_lens}" >> $GITHUB_ENV
          PKGDIR_these_optics="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/these-optics-[0-9.]*')"
          echo "PKGDIR_these_optics=${PKGDIR_these_optics}" >> $GITHUB_ENV
          PKGDIR_semialign="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/semialign-[0-9.]*')"
          echo "PKGDIR_semialign=${PKGDIR_semialign}" >> $GITHUB_ENV
          PKGDIR_monad_chronicle="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/monad-chronicle-[0-9.]*')"
          echo "PKGDIR_monad_chronicle=${PKGDIR_monad_chronicle}" >> $GITHUB_ENV
          PKGDIR_these_tests="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/these-tests-[0-9.]*')"
          echo "PKGDIR_these_tests=${PKGDIR_these_tests}" >> $GITHUB_ENV
          touch cabal.project
          touch cabal.project.local
          echo "packages: ${PKGDIR_these}" >> cabal.project
          echo "packages: ${PKGDIR_these_lens}" >> cabal.project
          if [ $((GHCJSARITH || ! GHCJSARITH && HCNUMVER >= 80000)) -ne 0 ] ; then echo "packages: ${PKGDIR_these_optics}" >> cabal.project ; fi
          echo "packages: ${PKGDIR_semialign}" >> cabal.project
          echo "packages: ${PKGDIR_monad_chronicle}" >> cabal.project
          echo "packages: ${PKGDIR_these_tests}" >> cabal.project
          if [ $((GHCJSARITH || ! GHCJSARITH && HCNUMVER >= 80200)) -ne 0 ] ; then echo "package these" >> cabal.project ; fi
          if [ $((GHCJSARITH || ! GHCJSARITH && HCNUMVER >= 80200)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          if [ $((GHCJSARITH || ! GHCJSARITH && HCNUMVER >= 80200)) -ne 0 ] ; then echo "package these-lens" >> cabal.project ; fi
          if [ $((GHCJSARITH || ! GHCJSARITH && HCNUMVER >= 80200)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          if [ $((GHCJSARITH || ! GHCJSARITH && HCNUMVER >= 80200)) -ne 0 ] ; then echo "package these-optics" >> cabal.project ; fi
          if [ $((GHCJSARITH || ! GHCJSARITH && HCNUMVER >= 80200)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          if [ $((GHCJSARITH || ! GHCJSARITH && HCNUMVER >= 80200)) -ne 0 ] ; then echo "package semialign" >> cabal.project ; fi
          if [ $((GHCJSARITH || ! GHCJSARITH && HCNUMVER >= 80200)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          if [ $((GHCJSARITH || ! GHCJSARITH && HCNUMVER >= 80200)) -ne 0 ] ; then echo "package monad-chronicle" >> cabal.project ; fi
          if [ $((GHCJSARITH || ! GHCJSARITH && HCNUMVER >= 80200)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          if [ $((GHCJSARITH || ! GHCJSARITH && HCNUMVER >= 80200)) -ne 0 ] ; then echo "package these-tests" >> cabal.project ; fi
          if [ $((GHCJSARITH || ! GHCJSARITH && HCNUMVER >= 80200)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          cat >> cabal.project <<EOF
          EOF
          $HCPKG list --simple-output --names-only | perl -ne 'for (split /\s+/) { print "constraints: $_ installed\n" unless /^(monad-chronicle|semialign|these|these-lens|these-optics|these-tests)$/; }' >> cabal.project.local
          cat cabal.project
          cat cabal.project.local
      - name: dump install plan
        run: |
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH --dry-run all
          cabal-plan
      - name: cache
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ github.sha }}
          path: ~/.cabal/store
          restore-keys: ${{ runner.os }}-${{ matrix.compiler }}-
      - name: build w/o tests
        run: |
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks all
      - name: build
        run: |
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH all --write-ghc-environment-files=always
      - name: tests
        run: |
          if [ $((! GHCJSARITH)) -ne 0 ] ; then $CABAL v2-test $ARG_COMPILER $ARG_TESTS $ARG_BENCH all --test-show-details=direct ; fi
          pkgdir() {
            case $1 in
              these) echo ${PKGDIR_these} ;;
              these-lens) echo ${PKGDIR_these_lens} ;;
              these-optics) echo ${PKGDIR_these_optics} ;;
              semialign) echo ${PKGDIR_semialign} ;;
              monad-chronicle) echo ${PKGDIR_monad_chronicle} ;;
              these-tests) echo ${PKGDIR_these_tests} ;;
            esac
          }

          if [ $((GHCJSARITH)) -ne 0 ] ; then cabal-plan list-bins '*:test:*' | while read -r line; do testpkg=$(echo "$line" | perl -pe 's/:.*//'); testexe=$(echo "$line" | awk '{ print $2 }'); echo "testing $textexe in package $textpkg"; (cd "$(pkgdir $testpkg)" && nodejs "$testexe".jsexe/all.js); done ; fi
      - name: doctest
        run: |
          if [ $((! GHCJSARITH && HCNUMVER >= 80000 && HCNUMVER < 90000)) -ne 0 ] ; then cd ${PKGDIR_these} || false ; fi
          if [ $((! GHCJSARITH && HCNUMVER >= 80000 && HCNUMVER < 90000)) -ne 0 ] ; then doctest  src ; fi
          if [ $((! GHCJSARITH && HCNUMVER >= 80000 && HCNUMVER < 90000)) -ne 0 ] ; then cd ${PKGDIR_these_lens} || false ; fi
          if [ $((! GHCJSARITH && HCNUMVER >= 80000 && HCNUMVER < 90000)) -ne 0 ] ; then doctest  src ; fi
          if [ $((! GHCJSARITH && HCNUMVER >= 80000 && HCNUMVER < 90000)) -ne 0 ] ; then cd ${PKGDIR_these_optics} || false ; fi
          if [ $((! GHCJSARITH && HCNUMVER >= 80000 && HCNUMVER < 90000)) -ne 0 ] ; then doctest  src ; fi
          if [ $((! GHCJSARITH && HCNUMVER >= 80000 && HCNUMVER < 90000)) -ne 0 ] ; then cd ${PKGDIR_semialign} || false ; fi
          if [ $((! GHCJSARITH && HCNUMVER >= 80000 && HCNUMVER < 90000)) -ne 0 ] ; then doctest  src ; fi
          if [ $((! GHCJSARITH && HCNUMVER >= 80000 && HCNUMVER < 90000)) -ne 0 ] ; then cd ${PKGDIR_monad_chronicle} || false ; fi
          if [ $((! GHCJSARITH && HCNUMVER >= 80000 && HCNUMVER < 90000)) -ne 0 ] ; then doctest  src ; fi
          if [ $((! GHCJSARITH && HCNUMVER >= 80000 && HCNUMVER < 90000)) -ne 0 ] ; then cd ${PKGDIR_these_tests} || false ; fi
          if [ $((! GHCJSARITH && HCNUMVER >= 80000 && HCNUMVER < 90000)) -ne 0 ] ; then doctest  src ; fi
      - name: docspec
        run: |
          if [ $((! GHCJSARITH)) -ne 0 ] ; then $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH all ; fi
          if [ $((! GHCJSARITH)) -ne 0 ] ; then cabal-docspec $ARG_COMPILER ; fi
      - name: cabal check
        run: |
          cd ${PKGDIR_these} || false
          ${CABAL} -vnormal check
          cd ${PKGDIR_these_lens} || false
          ${CABAL} -vnormal check
          if [ $((GHCJSARITH || ! GHCJSARITH && HCNUMVER >= 80000)) -ne 0 ] ; then cd ${PKGDIR_these_optics} || false ; fi
          if [ $((GHCJSARITH || ! GHCJSARITH && HCNUMVER >= 80000)) -ne 0 ] ; then ${CABAL} -vnormal check ; fi
          cd ${PKGDIR_semialign} || false
          ${CABAL} -vnormal check
          cd ${PKGDIR_monad_chronicle} || false
          ${CABAL} -vnormal check
          cd ${PKGDIR_these_tests} || false
          ${CABAL} -vnormal check
      - name: haddock
        run: |
          if [ $((! GHCJSARITH)) -ne 0 ] ; then $CABAL v2-haddock $ARG_COMPILER --with-haddock $HADDOCK $ARG_TESTS $ARG_BENCH all ; fi
      - name: unconstrained build
        run: |
          rm -f cabal.project.local
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks all
      - name: prepare for constraint sets
        run: |
          rm -f cabal.project.local
      - name: constraint set lens-4
        run: |
          if [ $((GHCJSARITH || ! GHCJSARITH && HCNUMVER < 90000)) -ne 0 ] ; then $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --constraint='lens <5' all ; fi
      - name: constraint set optics-0.3
        run: |
          if [ $((GHCJSARITH || ! GHCJSARITH && HCNUMVER >= 80000)) -ne 0 ] ; then $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --constraint='optics-core ^>=0.3' all ; fi
      - name: constraint set light
        run: |
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --constraint='monad-chronicle -semigroupoids' --constraint='semialign -semigroupoids' all
